version: 2.1
orbs:
  ruby: circleci/ruby@1.1.1 
  node: circleci/node@2

jobs:
  build:
    docker:
      - image: circleci/ruby:2.7.2-node
    executor: ruby/default
    steps:
      - checkout
      - run:
          name: Which bundler?
          command: bundle -v
      - ruby/install-deps
      # use the node orb to install our packages
      # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
      # learn more: https://circleci.com/docs/2.0/caching/
      - node/install-packages: 
          pkg-manager: yarn
          cache-key: "yarn.lock"
   
  test:
    # this splits our tests across multiple containers.
    parallelism: 3 
    # here we set TWO docker images.
    docker:
      - image: circleci/ruby:2.7.2-node # primary docker image
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: postgres
      - image: circleci/postgres:12.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: game_of_cups_test
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
    environment: # these variables apply to the primary container
      # Experimentally I commented out some that seem to already exist under the primary container
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      # PGHOST: 127.0.0.1
      # PGUSER: postgres
      PGPASSWORD: ""
      # RAILS_ENV: test
      SENTRY_ENDPOINT: $SENTRY_ENDPOINT
    steps:
      - checkout 
      - ruby/install-deps
      
      # Install psql because using structure.sql not schema.rb
      # See https://circleci.com/docs/2.0/postgres-config/

      - run: sudo apt install -y postgresql-client || true

      - run:
          name: See what version of psql is installed
          command: echo apt list postgresql-client

      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      # Here we make sure that the secondary container boots 
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rake db:structure:load --trace

      # Run rspec in parallel
      - ruby/rspec-test

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
